{"version":3,"sources":["../../src/components/TableHead.tsx","../../src/components/TableCellHeader.tsx","../../src/Builder.tsx","App.tsx","../../src/hooks/useTableActions.ts","index.tsx"],"names":["TableHead","children","colSpan","selected","selectable","items","toggleAll","toolbar","rest","React","padding","indeterminate","checked","onChange","TableCellHeader","PAGINATION_SIZES","className","columns","noDataMessage","draggable","loading","labelRowsPerPage","rowsPerPageOptions","rowsPerPage","DEFAULT_PAGINATION_SIZE","count","page","onPageChange","data","selectKey","isChecked","toggle","console","noOfColumns","title","key","renderLoading","collection","renderEmpty","renderTable","isSelected","rowData","hover","index","dataIndex","animation","variant","onChangePage","currentPage","onChangeRowsPerPage","parseInt","e","App","initial","compareFunc","a","useState","listElements","setListElements","listElement","add","remove","reset","set","allItems","useTableActions","Array","map","firstName","faker","name","lastName","email","internet","phone","phoneNumber","id","toString","log","length","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba153b60.chunk.js","sourcesContent":["import React from 'react'\nimport MuiTableHead, {\n  TableHeadProps as MuiTableHeadProps\n} from '@material-ui/core/TableHead'\nimport MUITableRow from '@material-ui/core/TableRow'\nimport MUITableCell from '@material-ui/core/TableCell'\nimport MUICheckbox from '@material-ui/core/Checkbox'\n\nimport Typography from '@material-ui/core/Typography'\n\nexport interface TableHeadProps<T> extends MuiTableHeadProps {\n  colSpan?: number\n  selected?: number\n  toolbar?: React.ReactNode | React.ReactNodeArray\n  selectable?: boolean\n  draggable?: boolean\n  items?: T[]\n  toggleAll?: (items: T[], selected: number) => void\n}\n\nconst TableHead = ({\n  children,\n  colSpan = 1,\n  selected = 0,\n  selectable,\n  items,\n  toggleAll,\n  toolbar,\n  ...rest\n}: TableHeadProps<any>) => {\n  return (\n    <MuiTableHead {...rest}>\n      <MUITableRow selected={!!selected}>\n        {selectable && items !== undefined && items.length > 0 && (\n          <MUITableCell padding='checkbox'>\n            <MUICheckbox\n              indeterminate={items && items.length > selected && selected > 0}\n              checked={selected !== 0}\n              onChange={() => {\n                if (toggleAll && items) {\n                  toggleAll(items, selected)\n                }\n              }}\n            />\n          </MUITableCell>\n        )}\n\n        {selected ? (\n          <MUITableCell colSpan={colSpan}>\n            <div>\n              {selected && <Typography>Selected {selected} items</Typography>}\n              <div />\n              {toolbar && <div>{toolbar}</div>}\n            </div>\n          </MUITableCell>\n        ) : (\n          children\n        )}\n      </MUITableRow>\n    </MuiTableHead>\n  )\n}\n\nexport default TableHead\n","import MUITableCell, {\n  TableCellProps as MUITableCellProps\n} from '@material-ui/core/TableCell'\nimport React from 'react'\n\nexport interface TableCellHeaderProps extends MUITableCellProps {\n  textAlign?: 'left' | 'center' | 'right'\n}\n\nconst TableCellHeader = ({ children }: TableCellHeaderProps) => {\n  return <MUITableCell>{children}</MUITableCell>\n}\n\nexport default TableCellHeader\n","import * as React from 'react'\nimport MUITable from '@material-ui/core/Table'\nimport MUITableBody from '@material-ui/core/TableBody'\nimport MUITableRow from '@material-ui/core/TableRow'\nimport MUITableCell from '@material-ui/core/TableCell'\nimport MUITableFooter from '@material-ui/core/TableFooter'\nimport MUITablePagination from '@material-ui/core/TablePagination'\nimport MUICheckbox from '@material-ui/core/Checkbox'\nimport MUISkeleton from '@material-ui/lab/Skeleton'\nimport TableHead, { TableHeadProps } from './components/TableHead'\nimport TableCellHeader from './components/TableCellHeader'\n\ninterface ColumnType {\n  title: string\n  key: string\n  dataIndex: string\n}\n\ninterface PaginationType {\n  labelRowsPerPage?: React.ReactNode\n  rowsPerPageOptions?: Array<number | { value: number; label: string }>\n  rowsPerPage?: number\n  count: number\n  page: number\n  onPageChange: (\n    page: number,\n    size: number,\n    order: 'asc' | 'desc',\n    field: string\n  ) => void\n}\n\nexport interface TableBuilderProps<T>\n  extends TableHeadProps<T>,\n    PaginationType {\n  columns: ColumnType[]\n  className?: string\n  noDataMessage?: string\n  loading?: boolean\n\n  data?: T[]\n\n  draggable?: boolean\n\n  selectable?: boolean\n  selectKey?: string\n  isChecked: (key: string) => boolean\n  toggle?: (item: T) => void\n}\n\nconst PAGINATION_SIZES = [5, 10, 25]\nconst DEFAULT_PAGINATION_SIZE = 5\n\nfunction renderTable<T>(\n  collection: T[] | undefined,\n  loading: boolean,\n  renderItem: (\n    item: T | undefined,\n    index: number | undefined,\n    collection: T[]\n  ) => any,\n  renderEmpty?: () => any,\n  renderLoading?: () => any\n) {\n  if (loading) {\n    return renderLoading ? renderLoading() : null\n  }\n  if (collection === undefined) {\n    return renderEmpty ? renderEmpty() : null\n  }\n  if (collection.length === 0) {\n    return renderEmpty ? renderEmpty() : null\n  }\n  return collection.map(renderItem)\n}\n\nconst TableBuilder = ({\n  className,\n  columns,\n  noDataMessage = 'No Data Available',\n  selectable,\n  draggable,\n  loading = false,\n  labelRowsPerPage,\n  rowsPerPageOptions = PAGINATION_SIZES,\n  rowsPerPage = DEFAULT_PAGINATION_SIZE,\n  count = 0,\n  page,\n  onPageChange,\n  data,\n  selectKey = 'id',\n  isChecked,\n  selected = 0,\n  toggle,\n  toggleAll,\n  toolbar\n}: TableBuilderProps<any>) => {\n  console.log(loading)\n\n  let noOfColumns = columns.length\n\n  if (selectable) {\n    noOfColumns += 1\n  }\n\n  if (draggable) {\n    noOfColumns += 1\n  }\n\n  console.log(data)\n  return (\n    <MUITable className={className}>\n      <TableHead\n        selected={selected}\n        colSpan={noOfColumns}\n        selectable={selectable}\n        toggleAll={toggleAll}\n        items={data}\n        toolbar={toolbar}\n      >\n        {columns &&\n          columns.map(({ title, key }: ColumnType) => (\n            <TableCellHeader key={key}>\n              <span>{title}</span>\n            </TableCellHeader>\n          ))}\n      </TableHead>\n      <MUITableBody>\n        {renderTable(\n          data,\n          loading,\n          (rowData, index) => {\n            const isSelected = rowData ? isChecked(rowData[selectKey]) : false\n            return (\n              <MUITableRow\n                selected={isSelected}\n                hover={!!rowData}\n                key={rowData && 'id' in rowData ? rowData.id : index}\n              >\n                {selectable && (\n                  <MUITableCell padding='checkbox'>\n                    <MUICheckbox\n                      checked={isSelected}\n                      onChange={() => {\n                        if (toggle && rowData) {\n                          toggle(rowData)\n                        }\n                      }}\n                    />\n                  </MUITableCell>\n                )}\n                {columns &&\n                  columns.map(({ key, dataIndex }) => (\n                    <MUITableCell data-test={dataIndex} key={key}>\n                      {rowData && key in rowData ? rowData[key] : '-'}\n                    </MUITableCell>\n                  ))}\n              </MUITableRow>\n            )\n          },\n          () => (\n            <MUITableRow>\n              <MUITableCell colSpan={noOfColumns}>{noDataMessage}</MUITableCell>\n            </MUITableRow>\n          ),\n          () => (\n            <MUITableRow>\n              {columns &&\n                columns.map(({ key, dataIndex }) => (\n                  <MUITableCell data-test={dataIndex} key={key}>\n                    <MUISkeleton animation='wave' variant='text' />\n                  </MUITableCell>\n                ))}\n            </MUITableRow>\n          )\n        )}\n      </MUITableBody>\n      {!loading && (\n        <MUITableFooter>\n          <MUITableRow>\n            <MUITablePagination\n              colSpan={noOfColumns}\n              labelRowsPerPage={labelRowsPerPage}\n              rowsPerPageOptions={rowsPerPageOptions}\n              count={count}\n              rowsPerPage={rowsPerPage}\n              page={page >= 1 ? page - 1 : 0}\n              onChangePage={(_: any, currentPage: number) => {\n                onPageChange(currentPage + 1, rowsPerPage, 'asc', '')\n              }}\n              onChangeRowsPerPage={(e: any) => {\n                onPageChange(\n                  page,\n                  parseInt(e.target.value as string),\n                  'asc',\n                  ''\n                )\n              }}\n            />\n          </MUITableRow>\n        </MUITableFooter>\n      )}\n    </MUITable>\n  )\n}\n\nexport default TableBuilder\n","import React from 'react'\nimport faker from 'faker'\n\nimport TableBuilder, { useTableActions } from 'acadamia-table-builder'\nimport 'acadamia-table-builder/dist/index.css'\n\nconst generateDummyData = (count: number): any[] => {\n  return [...Array(count)]\n    .map(() => ({\n      firstName: faker.name.firstName(),\n      lastName: faker.name.lastName(),\n      email: faker.internet.email(),\n      phone: faker.phone.phoneNumber()\n    }))\n    .map((data, index) => ({\n      ...data,\n      name: `${data.firstName} ${data.lastName}`,\n      id: index.toString()\n    }))\n}\n\nconst App = () => {\n  const {\n    isSelected,\n    toggle,\n    toggleAll,\n    listElements\n  } = useTableActions<string>([])\n\n  const data = generateDummyData(20)\n\n  console.log(data)\n  return (\n    <TableBuilder\n      loading={false}\n      columns={[\n        {\n          key: 'name',\n          title: 'Name',\n          dataIndex: 'name'\n        },\n        {\n          key: 'email',\n          title: 'Email',\n          dataIndex: 'email'\n        },\n        {\n          key: 'phone',\n          title: 'Phone',\n          dataIndex: 'phone'\n        }\n      ]}\n      data={data}\n      onPageChange={() => {\n        console.log('Page Change')\n      }}\n      count={data.length}\n      isChecked={isSelected}\n      selectable\n      toggle={(item: any) => {\n        toggle(item.id)\n      }}\n      selected={listElements.length}\n      toggleAll={(items: any[], selected: number) => {\n        toggleAll(\n          items.map((item) => item.id),\n          selected\n        )\n      }}\n      page={1}\n    />\n  )\n}\n\nexport default App\n","import { useState } from 'react'\n\nfunction useTableActions<T>(\n  initial: T[] = [],\n  compareFunc: (a: T, b: T) => boolean = (a, b) => a === b\n) {\n  const [listElements, setListElements] = useState(initial)\n\n  function add(data: T) {\n    setListElements([...listElements, data])\n  }\n\n  function remove(data: T) {\n    setListElements(\n      listElements.filter((listElement) => !compareFunc(listElement, data))\n    )\n  }\n\n  function reset() {\n    setListElements([])\n  }\n\n  function isSelected(data: T) {\n    return !!listElements.find((listElement) => compareFunc(listElement, data))\n  }\n\n  function set(data: T[]) {\n    setListElements(data)\n  }\n\n  function toggle(data: T) {\n    if (isSelected(data)) {\n      remove(data)\n    } else {\n      add(data)\n    }\n  }\n\n  function toggleAll(data: T[], selected: number) {\n    const allItems = data.filter((item) => !!item)\n    reset()\n    if (selected !== allItems.length) {\n      set(allItems)\n    }\n  }\n\n  return {\n    add,\n    remove,\n    reset,\n    isSelected,\n    set,\n    toggle,\n    toggleAll,\n    listElements\n  }\n}\n\nexport default useTableActions\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}